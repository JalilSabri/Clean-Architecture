// <auto-generated />
using System;
using CleanArch.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArch.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CleanArchDbContext))]
    [Migration("20230213233847_ReCreate Tables 02")]
    partial class ReCreateTables02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Order.OrderItems", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("ordersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("productsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ordersId");

                    b.HasIndex("productsId");

                    b.ToTable("tblOrderItems");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Order.Orders", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SalesPerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<string>("salesPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("salesPersonId");

                    b.ToTable("tblOrders");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Order.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatusTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tblOrderStatus");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Persons.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerPersonId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerPersonId")
                        .IsUnique();

                    b.ToTable("tblCustomers");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Persons.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblPersons");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Persons.SalesPerson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("State")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("tblSalesPersons");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Product.Products", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Varienty")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("tblProducts");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Order.OrderItems", b =>
                {
                    b.HasOne("CleanArch.Core.Domain.Models.Order.Orders", "orders")
                        .WithMany("orderItems")
                        .HasForeignKey("ordersId");

                    b.HasOne("CleanArch.Core.Domain.Models.Product.Products", "products")
                        .WithMany()
                        .HasForeignKey("productsId");

                    b.Navigation("orders");

                    b.Navigation("products");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Order.Orders", b =>
                {
                    b.HasOne("CleanArch.Core.Domain.Models.Persons.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArch.Core.Domain.Models.Order.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArch.Core.Domain.Models.Persons.SalesPerson", "salesPerson")
                        .WithMany()
                        .HasForeignKey("salesPersonId");

                    b.Navigation("OrderStatus");

                    b.Navigation("customer");

                    b.Navigation("salesPerson");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Persons.Customer", b =>
                {
                    b.HasOne("CleanArch.Core.Domain.Models.Persons.Person", "person")
                        .WithOne("customers")
                        .HasForeignKey("CleanArch.Core.Domain.Models.Persons.Customer", "CustomerPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Persons.SalesPerson", b =>
                {
                    b.HasOne("CleanArch.Core.Domain.Models.Persons.Person", "person")
                        .WithOne("salesPerson")
                        .HasForeignKey("CleanArch.Core.Domain.Models.Persons.SalesPerson", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Order.Orders", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("CleanArch.Core.Domain.Models.Persons.Person", b =>
                {
                    b.Navigation("customers")
                        .IsRequired();

                    b.Navigation("salesPerson")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
